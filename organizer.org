## Filing location: Select interactively, default, or last used:
##     C-u C-c C-c  to select file and header location interactively.
##         C-c C-c  "~/notebook/personal/organizer.org" -> "* Tasks"
## C-u C-u C-c C-c  "???" -> "* ???"
## To switch templates, use `M-x org-remember'.
## To start remembering something: C-c r t
* Things To Do
     :PROPERTIES:
     :COOKIE_DATA: checkbox recursive
     :END:
** Things To Do In Emacs [21/143]
     :PROPERTIES:
     :COOKIE_DATA: checkbox recursive
     :END:
- [X] make sure all the ruby stuff is set up and working properly :important:
- [X] get flymake working for ruby, css/sass/scss, coffee, and javascript
     NOTE: using flycheck instead
- [X] decide if I'm going to keep using org-remember, or switch to org-capture
- [ ] learn how to use the calculator
- [ ] learn how to use tumblesocks
- [ ] learn how to use openwith
- [ ] learn how to use the web browser
- [ ] learn how to compare windows
- [ ] learn how to diff files
- [X] setup flymake for ruby and php files
- [ ] install and setup and learn how to use a ruby debugger
 - get it working with rails, too
- [ ] learn what 'glasses' is
 - it's a minor mode to change stuff that's displayed withVariableNamesLikeThis to with_variable_names_like_this
- [ ] memorize commands for code folding [0/2]
 - [ ] make sure it works in ruby
 - [ ] and javascript
- [X] find a mongo shell mode
- [ ] find a good mode for monitoring logs
- [X] merge work and home emacs setups
- [X] setup rsense ( ruby tool ) and learn what it does
- [X] make sure auto-complete is set up for ruby
 - and make sure that it's picking up stuff from within the project
- [X] make sure that auto-mode-alist stuff is working [6/6]
 - [X] coffeescript
 - [X] json
 - [X] javascript
 - [X] ruby
 - [X] yaml
 - [X] sass/scss/css
- [-] setup and learn how to use these modes [1/88]
 - [ ] malabar-mode
 - [ ] ob-sml
 - [ ] sml-mode
 - [ ] sml-modeline
 - [ ] window-number
 - [ ] weather-metno
 - [ ] weather
 - [ ] newsticker
 - [ ] know-your-http-well
 - [ ] inflections
 - [ ] legalese
 - [ ] lorem-ipsum
 - [ ] thesaurus
 - [ ] mode-icons
 - [ ] free-keys
 - [ ] dropbox
 - [ ] heroku
 - [ ] hackernews
 - [ ] imgur
 - [ ] twitter
 - [ ] tumblesocks
 - [ ] wtf
 - [ ] xmlgen
 - [ ] xlicense
 - [ ] keyfreq
 - [ ] mongo
 - [ ] eredis
 - [ ] highlight ( and related modes )
 - [ ] linenum
 - [ ] markdown and related modes
 - [ ] uniquify
 - [ ] soundcloud
 - [ ] pomodoro
 - [ ] projectile
 - [ ] robe
 - [ ] sudo-ext
 - [ ] tea-time
 - [ ] web-mode
 - [ ] web-beautify
 - [ ] weather
 - [ ] doc-mode
 - [ ] dired-rainbow
 - [ ] diff-hl
 - [ ] diff-git
 - [ ] bundler
 - [ ] bbdb-ext
 - [ ] bbdb-
 - [ ] bbdb
 - [ ] xkcd
 - [ ] writegood-mode
 - [ ] writeroom-mode
 - [X] yard-mode
 - [ ] calfw
 - [ ] calfw-gcal
 - [ ] css-eldoc
 - [ ] csv-mode
 - [ ] sos
 - [ ] dedicated
 - [ ] dired-efap
 - [ ] elfeed
 - [ ] ecb
 - [ ] ham-mode
 - [ ] howdoi
 - [ ] httpcode
 - [ ] httprepl
 - [ ] multi-web-mode
 - [ ] muse
 - [ ] mustache-mode
 - [ ] nanowrimo
 - [ ] org-bullets
 - [ ] regex-tool
 - [ ] rsense
 - [ ] rtags
 - [ ] skype
 - [ ] stylus-mode
 - [ ] tdd-status-mode-line
 - [ ] tomatinho
 - [ ] top-mode
 - [ ] volume
 - [ ] weather-metno
 - [ ] worklog
 - [ ] zen-mode
 - [ ] zlc
 - [ ] eldoc-eval
 - [ ] eldoc-extension
 - [ ] c-eldoc
 - [ ] dtrt-indent
 - [ ] editorconfig
- [X] learn more about how to use dired
- [X] learn more about helm
- [ ] find a spreadsheet mode for emacs
- [ ] set up music [0/2]
 - [ ] get some music on dropbox to play when not connected to the internet
 - [ ] see if there's a soundcloud package
- [ ] learn more magit stuff [0/4]
 - [ ] diffing files
 - [ ] checking out specific versions
 - [ ] cherry picking
 - [ ] github integration stuff
- [ ] set up google stuff [0/3]
 - [ ] contacts
 - [ ] translate
 - [ ] 'google-this'
- [-] set up slime and clojure stuff
 - [ ] slime
 - [X] clojure/cider
- [ ] make sure yasnippets has plenty of vagrant, ruby, coffee, and js snippets
- set up / configure / look into these things for gnus [2/8]
 - [ ] signatures ( possibly multiple templates )
 - [-] add sean@seanhagen.ca account [2/4]
  - [X] offlineimap multiple accounts
  - [X] gnus read second account
  - [ ] postfix setup to send as multiple accounts ( might not be possible with current setup )
  - [ ] gnus reply from "To:" email
 - [ ] contact database
 - [ ] contact autocomplete
** Project Ideas!
     :PROPERTIES:
     :COOKIE_DATA: checkbox recursive
     :END:
*** In & Out [0/25]
     :PROPERTIES:
     :COOKIE_DATA: checkbox recursive
     :END:
 - [ ] consider changing name to 'In or Out'
 - [ ] do project using Ember.js
 - [ ] concepts [0/20]
  - [ ] users can login/register using any of the following services [0/4]
   - [ ] google account
   - [ ] twitter
   - [ ] facebook
   - [ ] github
  - [ ] once signed up, users can join or create an 'organization'
  - [ ] each organization starts with one team, 'general' ( nomenclature? )
  - [ ] users can invite other users ( email, twitter, facebook ) to join an organization
  - [ ] any user in an organization can create, rename, or delete teams
  - [ ] the default team is undeletable and unrenameable
  - [ ] users can put themselves into any team
  - [ ] users can belong to as many organizations as they choose
  - [ ] users can set their status, which is displayed next to their name ( possibly just their avatar )
   - [ ] statuses [0/4]
    - [ ] available
    - [ ] in a meeting
    - [ ] not working right now
    - [ ] out of the office
   - [ ] set status per organization? [0/1]
    - [ ] this would let organizations define custom statuses / rename default statuses
 - [ ] when a user is any status but 'available', other users can leave them messages
  - which a user is notified for when they change their status
  - or possibly just right away, ala g+ notifications / fb messages / etc
*** Video Game [0/62]
     :PROPERTIES:
     :COOKIE_DATA: checkbox recursive
     :END:
 - [ ] figure out status of current video game project
 - [ ] big ideas [0/60]
  - [ ] have game engine just be the bare bones for an isometric tile based RPG engine
  - [ ] everything else is controlled via scripting ( lua or ruby )
  - [ ] build editor first ( after getting basic game engine up and running )
   - [ ] editor is basically game engine running in 'edit' mode
   - [ ] editor tools: [0/55]
    - [ ] sprite creator [0/11]
     - [ ] create sprites by inserting PNG images in sequence to create animation, or just one for a static sprite
     - [ ] give sprite a name
     - [ ] group sprites by type ( with subgroups )
      - ie, characters -> npc -> bob -> walking sprite, environment -> snow -> tree -> big tree 1, etc
     - [ ] saving sprite does the following
      - save all inserted images into proper folder ( defined by group/subgroups )
     - [ ] while editing sprite, show preview window of what the sprite will look like
     - [ ] also editable: delay between sprites if more than one image
     - [ ] after finished editing sprites, can render: [0/4]
      - [ ] saves all the images for current sprite into spritemap
      - [ ] can choose how high up the group tree to go to make spritemap ( ie, just this subgroup, up one, up two, make giant spritemap for each group )
      - [ ] also creates a file detailing where to find each sprite, the width of each frame, delay between frames
      - [ ] both of these files are saved into a zip ( or some sort of archive file )
    - [ ] entity creator [0/19]
     - [ ] create entities for use in world editor
     - [ ] can be anything
      - door, player, npc, enemy, house, map tile, weapon, item
     - [ ] can define restrictions for placement, or
     - [ ] will have an 'entity script', a script that defines the basic properties of [0/4]
      - [ ] this entity ( health amount, invincible, fightable, attacked last, last attacked by, etc, etc )
      - [ ] each entity script will subclass from some sort of parent
      - [ ] master parent being 'entity' or something similar, to define base properties like width,hight,length, position(x,y,z)
      - [ ] parent will also define how the entity is placed on a level ( z-pos, can other entities be placed on top [ie, grass -> tree okay, but tree -> table not okay ]  )
     - [ ] create animation states ( running north, walking west, standing still, battle ready, angry, sad, talking, etc )
      - attach sprites to different animation states
     - [ ] attach scripts to the entity itself [0/6]
      - [ ] scripts will have types ( trigger, behavior, flagset, etc ) [0/1]
       - [ ] some scripts, like a flagset ( list of boolean/value arrays )
        - will be shared with all other scripts for this entity
        - possibly even other entities ( ie, need to have some sort of player process flagset [ enemy x defeated, area y found, etc ]  to help drive conversations )
      - [ ] can be used to define how the entity behaves in general
      - [ ] scripts can control switching between animation states
      - [ ] scripts can also act as triggers
       - ie, player moves over this tile, warp them somewhere. enemy health < 50%? quaff potion. etc, etc.
      - [ ] can move the character around on the world map, or in the battle screen
     - [ ] entities will have several functions in the game engine that are proxied into the scripts that allow them to interact with other entities
      - ie, allow entites to do things like open doors, attack other entities, etc
     - [ ] can create and edit dialog trees for this entity
      - dialog trees are basically a special kind of script that will show the dialog and player text options based on flags within the entity and the player entity
     - [ ] some entities will not have scripts, and will be used specifically for triggers on the map ( ie, starting boss battle, starting cutscene, etc )
    - [ ] map editor [0/13]
     - [ ] define a 'level' [0/3]
      - [ ] a space that the player character can move around in
      - [ ] has a set width and height ( have to determine min and max values for those )
      - [ ] can have zero or more doors ( player entity can be placed and removed from levels using scripts )
     - [ ] place entities within the level
      - including rectangles that define when you might run into a random encounter ( if the game has random encounters )
     - [ ] edit entity ( possibly entity groups )
     - [ ] save level [0/6]
      - [ ] not sure if rendering should happen here, or in the sprite editor
      - [ ] kind of makes more sense here, because then scripts for the entities can be bundled with the level
       - good thing for things like trigger entities
      - [ ] some entities live outside the levels but for ones that don't, it makes more sense to bundle the with the level
       - [ ] for entities that make apperances in more than one level, it's fine to bundle their sprite with more than one level
       - [ ] or possibly have the render/spritemap generation be a 'render game' thing, [0/1]
           so that the engine can figure out which sprites appear in N or more levels
           and put them into files that are loaded regardless of level or for specific sets of levels
        - [ ] think sprite groups, but for levels. if there are only three or four 'common townsfolk' sprites, it makes more sense to bundle them in a way
            that they're bundled not only with the town, but with every building in that town ( for the insides of buildings, etc )
    - [ ] cutscene creator [0/8]
     - [ ] cutscenes come in two flavors [0/2]
      - [ ] 'in-game', where you still see the game world, but a better quality sprite plus a text box is overlaid on the screen
          http://www.youtube.com/watch?feature=player_detailpage&v=hUuLYvsU4sc#t=102s
      - [ ] 'theatre', where the screen is taken over by a nice movie-style animation
     - [ ] create cutscenes by pairing animations with text.
     - [ ] need to find out if SDL can do transparency on video ( chromakey, perhaps )
     - [ ] also need to find out if SDL ( or some other C++ library ) can handle subtitle files [0/2]
      - [ ] alternatively, each cutscene comes with a script that controls the timing of when text is displayed ( possibly generated using dialog editor )
      - [ ] this way, 'in-game' cutscenes can do things like make characters move about during a cutscene
*** Portfoliooooo [0/7]
     :PROPERTIES:
     :COOKIE_DATA: checkbox recursive
     :END:
 - [ ] projects!
  - [ ] create project
   - fields: [0/4]
    - [ ] name
    - [ ] language
    - [ ] demo url
    - [ ] description
  - [ ] view project
** Things To Learn [1/21]
     :PROPERTIES:
     :COOKIE_DATA: checkbox recursive
     :END:
- [ ] Dart!
- [X] Check out AngularJS
 - [ ] do some projects using AngularJS
  - [ ] rails backend
  - [ ] nodejs backend
  - [ ] clojure backend
- [ ] Go
- [ ] Clojure
- [ ] Erlang
  - Learn You A Haskell For Great Good!
- [ ] Haskell
  - Learn You A Haskell For Great Good!
- [ ] Processing [0/3]
  - [ ] Get a better handle on it
  - [ ] Figure out how to do the 'growing vine' thing
  - [ ] Finally do that 'love vs hate' idea I have
- [ ] Racket
- [ ] Command Line
  - [ ] gcalcli
  - [ ] cloudprint
  - [ ] googlecl
  - [ ] grive
- [ ] nvm: node version manager
